/* eslint-disable @next/next/no-img-element */
import { useState, useEffect } from "react";
import {
  Button,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
} from "@mui/material";
import ClearIcon from "@mui/icons-material/Clear";
import { CatalogCard } from "../../components/CatalogCard/CatalogCard";
import Styles from "./index.module.scss";
import Head from "next/head";
import { NextPage } from "next";
import { Catalog } from "../../../types";
import { CardDm } from "components/CardDm/CardDm";
// import NoticeArea from "components/NoticeArea/NoticeArea";

const Catalog: NextPage<Props> = ({ apiData, listCategory, listCompany }) => {
  const [catalogs, setCatalogs] = useState<Catalog[]>([]);
  const [seasonList, setSeasonList] = useState<string[]>([]);
  const [makerList, setMakerList] = useState<string[]>([]);
  const [categoryValue, setCategoryValue] = useState("");
  const [seasonValue, setSeasonValue] = useState("");
  const [makerValue, setMakerValue] = useState("");

  //オブジェクトにkanaを追加して昇順にSORT
  useEffect(() => {
    apiData.map((data) =>
      listCompany.map(
        (campany) => data.maker === campany.maker && (data.kana = campany.kana)
      )
    );
    const newApiData = apiData.sort((a, b) => (a.kana < b.kana ? -1 : 1));
    setCatalogs(newApiData);
  }, [apiData, listCompany]);

  //seasonの重複を削除
  useEffect(() => {
    const seasonData = catalogs.map((catalog) => {
      return catalog.season[0];
    });
    const newData = Array.from(new Set(seasonData));
    setSeasonList(newData);
  }, [catalogs]);

  //makerの重複を削除
  useEffect(() => {
    const makerData = catalogs.map((data) => {
      return data.maker;
    });
    const newData = Array.from(new Set(makerData));
    setMakerList(newData);
  }, [catalogs]);

  //カテゴリーセレクターを選択した時のフィルター
  const onChangeCategory = (e: any) => {
    e.preventDefault();
    setCategoryValue(e.target.value);

    let prevCatalogs = [];
    prevCatalogs = selectedSeasonFilter(apiData);
    prevCatalogs = selectedMakerFilter(prevCatalogs);

    let newCatalogs = prevCatalogs.filter((catalog: any) => {
      if (e.target.value === "") return catalog;
      return catalog.category.includes(e.target.value);
    });
    setCatalogs(newCatalogs);
  };

  //シーズンセレクターを選択した時のフィルター
  const onChangeSeason = (e: any) => {
    e.preventDefault();
    setSeasonValue(e.target.value);

    let prevCatalogs: Catalog[] = [];
    prevCatalogs = selectedCatgoryFilter(apiData);
    prevCatalogs = selectedMakerFilter(prevCatalogs);

    let newCatalogs = prevCatalogs.filter((catalog) => {
      if (catalog.season.includes(e.target.value) || e.target.value === "") {
        return catalog;
      }
    });
    setCatalogs(newCatalogs);
  };

  //メーカーセレクターを選択した時のフィルター
  const onChangeMaker = (e: any) => {
    e.preventDefault();
    setMakerValue(e.target.value);

    let prevCatalogs: Catalog[] = [];
    prevCatalogs = selectedCatgoryFilter(apiData);
    prevCatalogs = selectedSeasonFilter(prevCatalogs);

    let newCatalogs = prevCatalogs.filter((catalog) => {
      if (catalog.maker.includes(e.target.value) || e.target.value == "")
        return catalog;
    });
    setCatalogs(newCatalogs);
  };

  //カテゴリーのフィルター関数
  const selectedCatgoryFilter = (lists: Catalog[]) => {
    let prevCatalogs = [];
    prevCatalogs = lists.filter((list) => {
      if (list.category.includes(categoryValue) || categoryValue == "")
        return list;
    });
    return prevCatalogs;
  };

  //シーズンのフィルター関数
  const selectedSeasonFilter = (lists: Catalog[]) => {
    let prevCatalogs = [];
    prevCatalogs = lists.filter((list) => {
      if (list.season.includes(seasonValue) || seasonValue == "") return list;
    });
    return prevCatalogs;
  };

  //メーカーのフィルター関数
  const selectedMakerFilter = (lists: Catalog[]) => {
    let prevCatalogs = [];
    prevCatalogs = lists.filter((list) => {
      if (list.maker.includes(makerValue) || makerValue == "") return list;
    });
    return prevCatalogs;
  };

  const onClickReset = () => {
    setCatalogs(apiData);
    setCategoryValue("");
    setSeasonValue("");
    setMakerValue("");
  };

  return (
    <>
      <Head>
        <title>マイユニポータル</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <NoticeArea /> */}
      <div
        className={`p-10 flex flex-col items-strach lg:flex-row lg:justify-center`}
      >
        <div className={`${Styles.formArea}`}>
          <FormControl variant="outlined" className={`w-full lg:w-56`}>
            <InputLabel
              id="demo-simple-select-category-label"
              aria-labelledby="select category"
            >
              Category
            </InputLabel>
            <Select
              labelId="demo-simple-select-category-label"
              value={categoryValue}
              onChange={onChangeCategory}
              label="category"
            >
              <MenuItem value="">
                <em>-- 全て選択 --</em>
              </MenuItem>
              {listCategory.map((value) => (
                <MenuItem key={value.id} value={value.key}>
                  {value.value}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </div>
        <div className={`${Styles.formArea}`}>
          <FormControl variant="outlined" className={`w-full lg:w-56`}>
            <InputLabel
              id="demo-simple-select-season-label"
              aria-labelledby="select season"
            >
              Season
            </InputLabel>
            <Select
              labelId="demo-simple-select-season-label"
              value={seasonValue}
              onChange={onChangeSeason}
              label="season"
            >
              <MenuItem value="">
                <em>-- 全て選択 --</em>
              </MenuItem>
              {seasonList.map((value, index) => (
                <MenuItem key={index} value={value}>
                  {value}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </div>
        <div className={`${Styles.formArea}`}>
          <FormControl variant="outlined" className={`w-full lg:w-56`}>
            <InputLabel
              id="demo-simple-select-maker-label"
              aria-labelledby="select maker"
            >
              maker
            </InputLabel>
            <Select
              labelId="demo-simple-select-maker-label"
              value={makerValue}
              onChange={onChangeMaker}
              label="maker"
            >
              <MenuItem value="">
                <em>-- 全て選択 --</em>
              </MenuItem>
              {makerList.map((value, index) => (
                <MenuItem key={index} value={value}>
                  {value}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </div>

        <Button
          className="bg-red-500"
          variant="contained"
          color="error"
          startIcon={<ClearIcon />}
          onClick={onClickReset}
          aria-label="reset button"
        >
          Reset
        </Button>
      </div>

      <section
        className={`${Styles.container} flex flex-wrap justify-center mx-auto mb-12`}
      >
        <CardDm />
        <CatalogCard catalogs={catalogs} />
      </section>
    </>
  );
};
export default Catalog;

export async function getStaticProps() {
  const url = "https://daimaru-hakui.microcms.io/api/v1";
  const apiKey: string = "3c62454d-9a98-4e3d-aee1-d337c3bbdf7e";
  const params = {
    headers: {
      "X-API-KEY": apiKey,
    },
  };
  const [resCatalogs, resCategoryLists, resCompany] = await Promise.all([
    await fetch(`${url}/catalog?limit=250`, params),
    await fetch(`${url}/catalog-category?limit=50`, params),
    await fetch(`${url}/company?limit=100`, params),
  ]);

  const dataCatalogs = await resCatalogs.json();
  const dataCategoryLists = await resCategoryLists.json();
  const dataCompanyLists = await resCompany.json();
  if (!dataCatalogs) return { notFound: true };
  if (!dataCategoryLists) return { notFound: true };
  if (!dataCompanyLists) return { notFound: true };

  let apiData = dataCatalogs.contents.filter((content: any) => {
    return content.transaction === true;
  });
  let listCompany = dataCompanyLists.contents;

  apiData = apiData.sort((a: any, b: any) => {
    if (a.kana > b.kana) {
      return 1;
    }
  });

  let listCategory = dataCategoryLists.contents;

  return {
    props: { apiData, listCategory, listCompany },
  };
}

type Props = {
  apiData: ApiData[];
  listCategory: listCategory[];
  listCompany: listCompany[];
};

type ApiData = {
  id: string;
  maker: string;
  title: string;
  year: string;
  category: Array<string>;
  season: Array<string>;
  link: string;
  image: {
    url: string;
    height: number;
    width: number;
  };
  kana: string;
  transaction: boolean;
};
type listCategory = {
  id: string;
  key: string;
  value: string;
};

type listCompany = {
  id: string;
  maker: string;
  kana: string;
  link: string;
};
